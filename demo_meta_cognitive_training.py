#!/usr/bin/env python3
"""
Meta-Cognitive ARC Training Demonstration
Shows the Governor and Architect systems working together during real training
"""
import asyncio
import sys
import time
from pathlib import Path
import json

# Add src to path
sys.path.insert(0, str(Path(__file__).parent / "src"))
sys.path.insert(0, str(Path(__file__).parent))

from train_arc_agent import UnifiedTrainer
import colorama
from colorama import Fore, Style
colorama.init()

class MetaCognitiveDemo:
    """Demonstrates meta-cognitive systems during ARC training."""
    
    def __init__(self):
        self.base_path = Path(__file__).parent.absolute()
        
    def create_demo_args(self):
        """Create training arguments for demonstration."""
        class Args:
            def __init__(self):
                self.mode = "sequential"
                self.salience = "decay" 
                self.verbose = True
                self.mastery_sessions = 3  # Short demo
                self.games = 5  # Limited games for demo
                self.target_win_rate = 0.6
                self.target_score = 60
                self.max_learning_cycles = 2  # Quick demo
                self.max_actions_per_session = 500
                self.enable_contrarian_mode = True
                self.meta_cognitive_enabled = True  # Enable our new systems!
        
        return Args()
    
    async def demonstrate_meta_cognitive_training(self):
        """Run ARC training with meta-cognitive systems active."""
        print(f"{Fore.BLUE}{'='*70}")
        print(f"üß† META-COGNITIVE ARC TRAINING DEMONSTRATION")
        print(f"{'='*70}{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}Initializing Tabula Rasa with Meta-Cognitive Systems...{Style.RESET_ALL}")
        
        # Create trainer with meta-cognitive systems
        args = self.create_demo_args()
        trainer = UnifiedTrainer(args)
        
        # Verify meta-cognitive systems are active
        print(f"\n{Fore.GREEN}‚úÖ META-COGNITIVE HIERARCHY ACTIVE:{Style.RESET_ALL}")
        print(f"   üß† Primary Brain: UnifiedTrainer with 37 cognitive systems")
        print(f"   üß† Third Brain: MetaCognitiveGovernor monitoring {len(trainer.governor.system_monitors)} systems")
        print(f"   üß† Zeroth Brain: Architect at generation {trainer.architect.generation}")
        
        # Show initial system state
        print(f"\n{Fore.CYAN}üìä INITIAL SYSTEM STATE:{Style.RESET_ALL}")
        print(f"   Training mode: {trainer.mode}")
        print(f"   Salience mode: {trainer.salience}")
        print(f"   Target win rate: {trainer.target_win_rate}")
        print(f"   Max actions per session: {trainer.max_actions_per_session}")
        
        # Get initial Governor recommendation
        print(f"\n{Fore.MAGENTA}üéØ GOVERNOR ANALYSIS:{Style.RESET_ALL}")
        initial_recommendation = trainer.governor.get_recommended_configuration(
            puzzle_type="arc_demo",
            current_performance={'win_rate': 0.2, 'avg_score': 25, 'learning_rate': 0.1},
            current_config={
                'max_actions_per_game': trainer.max_actions_per_session,
                'salience_mode': trainer.salience,
                'contrarian_enabled': trainer.enable_contrarian_mode
            }
        )
        
        if initial_recommendation:
            print(f"   üìã Recommendation Type: {initial_recommendation.type.value}")
            print(f"   üìä Confidence: {initial_recommendation.confidence:.1%}")
            print(f"   üîÑ Suggested Changes: {initial_recommendation.configuration_changes}")
            print(f"   üí° Rationale: {initial_recommendation.rationale}")
        else:
            print(f"   ‚úÖ Current configuration is optimal")
        
        # Simulate some training performance data
        print(f"\n{Fore.YELLOW}üèÉ SIMULATING TRAINING SESSION...{Style.RESET_ALL}")
        
        # Mock performance progression
        performance_history = [
            {'cycle': 1, 'win_rate': 0.2, 'avg_score': 25, 'efficiency': 0.3},
            {'cycle': 2, 'win_rate': 0.3, 'avg_score': 35, 'efficiency': 0.4},
            {'cycle': 3, 'win_rate': 0.45, 'avg_score': 48, 'efficiency': 0.35},  # Efficiency drops
        ]
        
        for i, perf in enumerate(performance_history):
            print(f"\n{Fore.CYAN}üìà Training Cycle {perf['cycle']}:{Style.RESET_ALL}")
            print(f"   Win Rate: {perf['win_rate']:.1%}")
            print(f"   Average Score: {perf['avg_score']}")
            print(f"   Efficiency: {perf['efficiency']:.1%}")
            
            # Get Governor recommendation for this performance
            recommendation = trainer.governor.get_recommended_configuration(
                puzzle_type="arc_training",
                current_performance=perf,
                current_config={
                    'max_actions_per_game': trainer.max_actions_per_session,
                    'salience_mode': trainer.salience,
                    'contrarian_enabled': trainer.enable_contrarian_mode
                }
            )
            
            if recommendation:
                print(f"   üéØ Governor Says: {recommendation.type.value}")
                print(f"   üí° Reasoning: {recommendation.rationale}")
                print(f"   üîÑ Adjustments: {recommendation.configuration_changes}")
                
                # If efficiency is dropping, escalate to Architect
                if perf['efficiency'] < 0.4 and perf['cycle'] >= 3:
                    print(f"\n{Fore.RED}‚ö†Ô∏è  LOW EFFICIENCY DETECTED - ESCALATING TO ARCHITECT{Style.RESET_ALL}")
                    
                    architect_request = trainer.governor.create_architect_request(
                        issue_type="low_efficiency",
                        problem_description="System efficiency declining despite improving win rate",
                        performance_data=perf
                    )
                    
                    print(f"   üìã Architect Request: {architect_request.issue_type}")
                    print(f"   üö® Priority: {architect_request.priority:.2f}")
                    
                    # Process through Architect
                    architect_response = await trainer.architect.process_governor_request(architect_request)
                    
                    print(f"   üî¨ Architect Response: {'SUCCESS' if architect_response.get('success') else 'FAILED'}")
                    if architect_response.get('success'):
                        print(f"   üí° Proposed Solution: Architectural modification generated")
                    
            await asyncio.sleep(1)  # Simulate time between cycles
        
        # Demonstrate autonomous evolution
        print(f"\n{Fore.MAGENTA}üß¨ AUTONOMOUS EVOLUTION CYCLE:{Style.RESET_ALL}")
        evolution_result = await trainer.architect.autonomous_evolution_cycle()
        
        print(f"   üìä Evolution Result: {'SUCCESS' if evolution_result['success'] else 'FAILED'}")
        print(f"   üîÑ Generation: {evolution_result['generation']}")
        if evolution_result.get('improvement'):
            print(f"   üìà Improvement: {evolution_result['improvement']:.3f}")
        
        # Show final system status
        print(f"\n{Fore.GREEN}üéØ FINAL SYSTEM STATUS:{Style.RESET_ALL}")
        status = trainer.architect.get_evolution_status()
        print(f"   üß™ Total mutations tested: {status['total_mutations_tested']}")
        print(f"   ‚úÖ Success rate: {status['success_rate']:.1%}")
        print(f"   üîÑ Current generation: {trainer.architect.generation}")
        
        print(f"\n{Fore.BLUE}{'='*70}")
        print(f"üéâ META-COGNITIVE DEMONSTRATION COMPLETE")
        print(f"{'='*70}{Style.RESET_ALL}")
        
        print(f"\n{Fore.YELLOW}Summary of Capabilities Demonstrated:{Style.RESET_ALL}")
        print(f"‚úÖ Real-time performance monitoring across 37 cognitive systems")
        print(f"‚úÖ Dynamic configuration optimization based on training context")
        print(f"‚úÖ Automatic escalation of systemic issues to architectural level")
        print(f"‚úÖ Safe autonomous evolution with sandboxed testing")
        print(f"‚úÖ Seamless integration with existing ARC training pipeline")
        
        return True

async def main():
    """Run the meta-cognitive demonstration."""
    demo = MetaCognitiveDemo()
    
    print(f"{Fore.CYAN}Starting Meta-Cognitive ARC Training Demo...{Style.RESET_ALL}")
    print(f"This will show the Governor and Architect working together")
    print(f"during a simulated ARC training session.\n")
    
    try:
        success = await demo.demonstrate_meta_cognitive_training()
        if success:
            print(f"\n{Fore.GREEN}üöÄ Demo completed successfully!")
            print(f"The meta-cognitive system is ready for full ARC training.{Style.RESET_ALL}")
        else:
            print(f"\n{Fore.RED}‚ùå Demo encountered issues.{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå Demo failed: {e}{Style.RESET_ALL}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
